{"name":"HYLImageManager","tagline":"This is a convenience CRUD tool for image files in iOS file system","body":"# What is it?\r\n\r\nHYLImageManager is a convenience CRUD tool for image files in iOS file system. It is a simplified version of NSFileManager providing only simple CRUD methods with using a file name. This module is suitable for foundamental objective-c programmers who needs to save image or other file to persistent store. \r\n\r\nFor example, when you finish downloading a image, you may need to cache or store in local file system for later use. So you can just call <code>[[HYLImageManager defaultManager] saveImage:image withImageName:@\"demoImage.png\"</code>. When you want to get it back, just call <code>UIImage* image = [[HYLImageManager defaultManager] imageWithName:@\"demoImage.png\"</code>.\r\n\r\n\r\n# How to use?\r\nFirstly, initialize a instance of HYLImageManager. If you don't care where the image is stored, just use the singleton instance.\r\nUsing it is quite simple.\r\n\r\n<pre><code>\r\nHYLImageManager *manager = [HYLImageManager defaultManager];\r\n</code></pre>\r\nIn this case all the image file will be stored into a default folder \"UserDocuments\" under /Documents. Or you can specify the directory path by initialize a instance.\r\n\r\n<pre><code>\r\nHYLImageManager *manager = [[HYLImageManager alloc] initWithRootPathComponents:@[@\"folderA\",@\"folderB\"];\r\n</code></pre>\r\nIn this case, the target path of operation will be <code>/Documents/folderA/folderB</code>\r\n\r\nThen use other methods as-is. Choose one class according to your needs.\r\n- HYLImageManager.h Choose this if you don't need to specify the directory of image file and don't need thumbnail.\r\n- HYLImageManager+Thumbnail.h Choose this if you want keep a thumbnail copy of the image. The thumbnail is resized to 100 pixels height and 133 width\r\n- HYLImageManager+Cache.h Choose this if you don't need to save image to a persistent location. For example, you want to save images from posts of social networking app.\r\n- HYLIMageManager+Thumbnail+Cache.h Choose this if you want to save image into cache and meanwhile keep thumbnail.\r\n\r\n### HYLImageManager\r\n\r\n####### fetch image\r\n<pre><code>\r\n-(UIImage *)imageWithName:(NSString *)imageName;\r\n</code></pre>\r\n####### save image \r\n<pre><code>\r\n- (void)saveImage:(UIImage *)image withImageName:(NSString *)imageName;\r\n</code></pre>\r\n####### save image using a generated name(timestamp). The image name will be returned.\r\n**Note, store the name or keep a reference of the name. You need use this name to fetch image again.**\r\n<pre><code>\r\n-(NSString *)saveImage:(UIImage *)image;\r\n</code></pre>\r\n####### delete image\r\n<pre><code>\r\n- (BOOL)deleteImageWithImageName:(NSString *)imageName error:(NSError **)error;\r\n</code></pre>\r\n####### rename image\r\n<pre><code>\r\n- (BOOL)renameImageFromImageName:(NSString *)oldImageName toNewImageName:(NSString *)newImageName error:(NSError **)error;\r\n</code></pre>\r\n\r\n### HYLImageManager+Thumbnail\r\nThis is a thumbnail version of HYLImageManager. All READ operation in this version has a flag for thumbnail. For save, delete and rename operations, they apply to both big image and thumnail. All thumbnails are saved into a directory called thumbnail. If your image file path is /Documents/folderA/folderB/aImage.png the path of the thumbnail will be in /Documents/folderA/folderB/thumbnail/aImage.png\r\n\r\n### HYLImageManager+Cache\r\nThis is a similar version of HYLImageManager. The only difference is this image manager save image to /Library/Caches, and it is possible that images may be removed by system under some circumstance.\r\n\r\n### HYLImageManager+Thumbnail+Cache\r\nThis is a cache version of HYLImageManager+Thumbnail. Similar to HYLImageManager+Cache, it save image files to /Library/Caches.\r\n\r\n### Note\r\nAll non-thumbnail images will be resized to maximum width 800 and maximum height 600 while keeping the original ratio and will be compressed by 50%. If you want to change this setting, look at UIImage+Store.m and modify\r\n<pre><code>\r\nstatic float const kDefaultMaxWidth = 800.0;\r\nstatic float const kDefaultMaxHeight = 600.0;\r\nstatic float const kDefaultCompressQuality = 0.5;\r\n</code></pre>\r\nIf you don't want resize and compress, change kDefaultMaxWidth and kDefaultMaxHeight to 0 and kDefaultCompressQuality to 1.0 .\r\n\r\n# Utility Classes\r\n\r\n### UIImage+Store\r\nThis UIImage Category is used in all HYLImageManager. If you want to specify your own path instead of image name in operation, just use this Category.\r\n\r\n# Bonus\r\n\r\n### HYLDownloadManager\r\nThis is a class used to handle concurrent downloading tasks and download file to yor desinated path. Initialize it like a HYLImageManager and use <code>- (NSURLSessionDownloadTask *)startDownloadTaskWithURL:(NSString *)urlString;</code> to create and start background downloading tasks. Use <code>- (NSURLSessionDownloadTask *)downloadingTaskWithURL:(NSString *)urlString;</code> to keep track of existing tasks. No matter your app enters background or terminated by system, these downloading tasks will keep going util finish as long as the network is available. \r\n\r\nCall <code>- (void)retrievingDownloadingTasks;</code> in UIApplicationDelegate when app become active to ensure the manager keep tracks of all ongoing download tasks. Use <code>- (NSURLSessionDownloadTask *)downloadingTaskWithURL:(NSString *)urlString;</code> to check if a task is ongoing.\r\n\r\nIf you want to monitor the progresses of all downloading tasks, just register your tableViewController to <code>kDownloadManagerProgressDidChangeNotification</code> notification. The notification.object is a instance of NSURLSessionDownloadTask, and notification.userinfo[kDownloadManagerUserInfoProgress] returns a float number between 0.0 and 1.0 indicate the progress of that task. Each time the progress changes, the task will send this notification.\r\n\r\n![downloading demo](https://github.com/lionhylra/HYLImageManager/blob/master/downloading.gif?raw=true)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}